name: Main CI

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build_test_release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Build, Test, and Lint
        run: mvn clean verify

      - name: Extract Current Version
        id: extract_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.CURRENT_VERSION }}"
          release_name: "v${{ env.CURRENT_VERSION }}"
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "target/RESTfulAPIApp-${{ env.CURRENT_VERSION }}.jar" 
          asset_name: "RESTfulAPIApp-${{ env.CURRENT_VERSION }}.jar"
          asset_content_type: application/java-archive

      - name: Bump Patch Version
        id: bump_version
        run: |
          # Split the current version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "${CURRENT_VERSION}"
          
          # Increment the patch version
          patch=$((patch + 1))
          
          # Construct the new version string
          NEW_VERSION="$major.$minor.$patch"

          # Update the version in pom.xml without creating a backup POM
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false
          
          # Export the new version as an environment variable
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and Push the New Version
        if: success()
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add pom.xml
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push origin main
