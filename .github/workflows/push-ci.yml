name: Main CI

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build_test_release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate new version
        id: calculate_version
        run: |
          # Remove the 'v' prefix
          VERSION=${LATEST_TAG#v}
          echo "Latest version: $VERSION"
          
          # Split version into major, minor, and patch
          IFS='.' read -r major minor patch <<< "$VERSION"
          
          # Increment the patch version
          patch=$((patch + 1))
          
          # Construct the new version string
          NEW_VERSION="$major.$minor.$patch"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set new version in pom.xml
        run: |
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false

      - name: Build, Test, and Lint
        run: mvn clean verify

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          release_name: "v${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "target/RESTfulAPIApp-${{ env.NEW_VERSION }}.jar"
          asset_name: "RESTfulAPIApp-${{ env.NEW_VERSION }}.jar"
          asset_content_type: application/java-archive

      - name: Create app.jar
        run: mv target/RESTfulAPIApp-${{ env.NEW_VERSION }}.jar app.jar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg NEW_VERSION=${{ env.NEW_VERSION }} \
            -t polpinol98/restfulapiapp:${{ env.NEW_VERSION }} \
            -t polpinol98/restfulapiapp:latest \
            .

      - name: Push Docker Image
        run: |
          docker push polpinol98/restfulapiapp:${{ env.NEW_VERSION }}
          docker push polpinol98/restfulapiapp:latest    
      - name: Update CD repository with new version
        run: |
          # Clone the CD repository
          git clone https://github.com/PolPinol/RESTfulAPI-CD.git
          cd RESTfulAPI-CD

          # Update the version in the relevant file (e.g., values.yaml or deployment.yaml)
          sed -i "s|polpinol98/restfulapiapp:.*|polpinol98/restfulapiapp:${{ env.NEW_VERSION }}|g" app/RESTfulAPI-deployment.yaml

          # Verify the change was made
          cat app/RESTfulAPI-deployment.yaml

          # Check if the file was modified
          git diff --exit-code
          if [ $? -eq 1 ]; then
            # Set up Git for the commit
            git config --global user.email "mate.alfredo98@gmail.com"
            git config --global user.name "GitHub Actions"

            # Set up authentication using GITHUB_TOKEN
            git remote set-url origin https://github.com/${{ github.repository }}.git
            git config --global credential.helper store
            echo "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials

            # Commit the changes
            git commit -am "Update image version to ${NEW_VERSION}"

            # Push the changes to the repository
            git push origin main
          else
            echo "No changes to commit."
          fi
      
