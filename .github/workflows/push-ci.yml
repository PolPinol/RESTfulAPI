name: Main CI

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build_test_release:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Get merged pull request
        id: get_merged_pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Determine version increment
        id: version_increment
        run: |
          LABELS="${{ steps.get_merged_pr.outputs.labels }}"
          echo "Labels found in PR: $LABELS"

          BUMP="none"

          if [[ "$LABELS" == *"major"* ]]; then
            BUMP="major"
          elif [[ "$LABELS" == *"minor"* ]]; then
            BUMP="minor"
          elif [[ "$LABELS" == *"patch"* ]]; then
            BUMP="patch"
          fi

          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: calculate_version
        run: |
          VERSION=${LATEST_TAG#v}
          echo "Latest version (from tag): $VERSION"

          IFS='.' read -r major minor patch <<< "$VERSION"

          BUMP=${{ steps.version_increment.outputs.bump }}

          if [ "$BUMP" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$BUMP" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          elif [ "$BUMP" = "patch" ]; then
            patch=$((patch + 1))
          else
            echo "No version bump requested (bump=none)."
          fi

          NEW_VERSION="$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version calculated: $NEW_VERSION"

      - name: Set new version in pom.xml
        run: |
          mvn versions:set -DnewVersion="${NEW_VERSION}" -DgenerateBackupPoms=false

      - name: Build, Test, and Lint
        run: mvn clean verify

      - name: Create GitHub Release
        if: steps.version_increment.outputs.bump != 'none'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          release_name: "v${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        if: steps.version_increment.outputs.bump != 'none'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "target/RESTfulAPIApp-${{ env.NEW_VERSION }}.jar"
          asset_name: "RESTfulAPIApp-${{ env.NEW_VERSION }}.jar"
          asset_content_type: application/java-archive

      - name: Create app.jar
        run: mv target/RESTfulAPIApp-${{ env.NEW_VERSION }}.jar app.jar

      - name: Log in to Docker Hub
        if: steps.version_increment.outputs.bump != 'none'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        if: steps.version_increment.outputs.bump != 'none'
        run: |
          docker build \
            --build-arg NEW_VERSION=${{ env.NEW_VERSION }} \
            -t polpinol98/restfulapiapp:${{ env.NEW_VERSION }} \
            -t polpinol98/restfulapiapp:latest \
            .

      - name: Push Docker Image
        if: steps.version_increment.outputs.bump != 'none'
        run: |
          docker push polpinol98/restfulapiapp:${{ env.NEW_VERSION }}
          docker push polpinol98/restfulapiapp:latest

      - name: Update Deployment in RESTfulAPI-CD
        if: steps.version_increment.outputs.bump != 'none'
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}
          CD_REPO_TOKEN: ${{ secrets.CD_REPO_TOKEN }}
        run: |
          git clone https://x-access-token:${CD_REPO_TOKEN}@github.com/PolPinol/RESTfulAPI-CD.git
          
          cd RESTfulAPI-CD
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          sed -i "s|docker.io/polpinol98/restfulapiapp:.*|docker.io/polpinol98/restfulapiapp:${NEW_VERSION}|g" app/RESTfulAPI-deployment.yaml
          
          git add app/RESTfulAPI-deployment.yaml
          git commit -m "Update RESTfulAPI image to version ${NEW_VERSION}"
          
          git push origin main
